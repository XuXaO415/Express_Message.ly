JSON Web Tokens
The JWT token itself is a string comprising three-parts:

Header: metadata abt token (signing algorithm used & type of token)
    It's returned as JSON
    ex:
    {
        "alg": "HS256",
        "typ": "JWT"
    }

Payload: data to be stored in token (typically an object)
    -Often this will store things like the user ID 
    -This is encoded, not encrypted - DO NOT STORE IMPORTANT INFO HERE!!
    ex:
    {
        "sub": "1234567890",
        "name": "John Doe",
        "permission": "Admin",
        "iat": 1516239022
    }

    Header and Payload are then encoded in Base64; just another way to express characters, storing txt. Transform into a single string.
 
Signature: version of header & payload, signed with secret key 
    -Uses algorithm specified in header
    -Verifies the origin of sender

Better explained =>

A JSON Web token is a token that stores information and is comprised of three parts:

Header - A base64 encoded string which contains the type of token and the name of the algorithm used for the signature

Payload - A base64 encoded string which contains all of the keys and values for the token

Signature - A string which is the result of the HMAC SHA256 encrypted base64 encoded header, the base64 encoded payload and the secret key. This signature is what is used to verify the authenticity of the token when it is sent to the server

HMAC SHA256 - Very difficult to hack/decrypt without a secret key (this is stored on the server)

Base64 - Very easy to decode, useful for easily converting into a 64 character length string.

Read from: 
https://www.rithmschool.com/courses/intermediate-flask/flask-jwt-authentication

Working w/t JWTs

Authenticate method can be written out like this:

def authenticate(username, password):
    user = User.query.filter(User.username == username).first()
    if bcrypt.check_password_hash(user.password, password):
        return user